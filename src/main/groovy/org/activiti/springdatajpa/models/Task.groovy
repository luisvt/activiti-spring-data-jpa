package org.activiti.springdatajpa.models;
// Generated Nov 21, 2015 11:41:58 AM by Hibernate Tools 3.2.2.GA
import org.activiti.springdatajpa.repositories.IdentityLinkRepository
import org.activiti.springdatajpa.models.enums.IdentityLinkType
import org.springframework.beans.factory.annotation.Autowired;

import javax.persistence.*;
import java.util.*

import static org.activiti.springdatajpa.models.enums.IdentityLinkType.CANDIDATE;

/**
 * Task generated by hbm2java
 */
@Entity
@Table(name = "act_ru_task")
public class Task {

    /**
     * Default value used for priority when a new {@link Task} is created.
     */
    public static int DEFAULT_PRIORITY = 50;

    public Task() {
    }

    public Task(String id) {
        this.id = id;
    }

    public Task(String id, ProcessDefinition processDefinition, Execution execution, Execution processInstance, Integer rev, String name, String parentTaskId, String description, String taskDefKey, String owner, String assignee, String delegation, Integer priority, Date createTime, Date dueDate, String category, Integer suspensionState, String tenantId, String formKey, Set<IdentityLink> identityLinks) {
        this.id = id;
        this.processDefinition = processDefinition;
        this.execution = execution;
        this.processInstance = processInstance;
        this.rev = rev;
        this.name = name;
        this.parentTaskId = parentTaskId;
        this.description = description;
        this.taskDefKey = taskDefKey;
        this.owner = owner;
        this.assignee = assignee;
        this.delegation = delegation;
        this.priority = priority;
        this.createTime = createTime;
        this.dueDate = dueDate;
        this.category = category;
        this.suspensionState = suspensionState;
        this.tenantId = tenantId;
        this.formKey = formKey;
        this.identityLinks = identityLinks;
    }

    @Id
    @Column(name = "id_", unique = true, nullable = false, length = 64)
    String id

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "proc_def_id_")
    ProcessDefinition processDefinition

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "execution_id_")
    Execution execution

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "proc_inst_id_")
    Execution processInstance

    @Column(name = "rev_")
    Integer rev

    @Column(name = "name_")
    String name

    @Column(name = "parent_task_id_", length = 64)
    String parentTaskId

    @Column(name = "description_", length = 4000)
    String description

    @Column(name = "task_def_key_")
    String taskDefKey

    @Column(name = "owner_")
    String owner

    @Column(name = "assignee_")
    String assignee

    @Column(name = "delegation_", length = 64)
    String delegation

    @Column(name = "priority_")
    Integer priority

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "create_time_", length = 29)
    Date createTime

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "due_date_", length = 29)
    Date dueDate

    @Column(name = "category_")
    String category

    @Column(name = "suspension_state_")
    Integer suspensionState

    @Column(name = "tenant_id_")
    String tenantId

    @Column(name = "form_key_")
    String formKey

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "task")
    Set<IdentityLink> identityLinks

    // task assignment //////////////////////////////////////////////////////////

    @Autowired
    @Transient
    private IdentityLinkRepository identityLinkRepository

    public IdentityLink addIdentityLink(String userId = null, String groupId = null, IdentityLinkType type) {
        IdentityLink identityLink = new IdentityLink(task: this, userId: userId, groupId: groupId, type: type);
        identityLinks.add(identityLink);
        identityLinkRepository.save(identityLink);
        if (userId != null && processInstance.id != null) {
            processInstance.involveUser(userId, IdentityLinkType.PARTICIPANT);
        }
        return identityLink;
    }

    public void deleteIdentityLink(String userId, String groupId, IdentityLinkType type) {
        List<IdentityLink> identityLinks = identityLinkRepository
                .findByTaskIdAndUserIdAndGroupIdAndType(id, userId, groupId, type);

        List<String> identityLinkIds = new ArrayList<String>();
        for (IdentityLink identityLink: identityLinks) {
            identityLinkRepository.delete(identityLink.id);
            identityLinkIds.add(identityLink.id);
        }

        // fix deleteCandidate() in create TaskListener
        List<IdentityLink> removedIdentityLinkEntities = new ArrayList<IdentityLink>();
        for (IdentityLink identityLink : this.getIdentityLinks()) {
            if (CANDIDATE.equals(identityLink.getType()) &&
                    !identityLinkIds.contains(identityLink.getId())) {

                if ((userId != null && userId.equals(identityLink.getUserId()))
                        || (groupId != null && groupId.equals(identityLink.getGroupId()))) {

                    identityLinkRepository.delete(identityLink.id);
                    removedIdentityLinkEntities.add(identityLink);
                }
            }
        }
        getIdentityLinks().removeAll(removedIdentityLinkEntities);
    }

    @Transient
    public Set<IdentityLink> getCandidates() {
        identityLinks.findAll { it.type == CANDIDATE }
    }

    public void addCandidateUser(String userId) {
        addIdentityLink(userId, null, CANDIDATE);
    }

    public void addCandidateUsers(Collection<String> candidateUsers) {
        for (String candidateUser : candidateUsers) {
            addCandidateUser(candidateUser);
        }
    }

    public void addCandidateGroup(String groupId) {
        addIdentityLink(null, groupId, CANDIDATE);
    }

    public void addCandidateGroups(Collection<String> candidateGroups) {
        for (String candidateGroup : candidateGroups) {
            addCandidateGroup(candidateGroup);
        }
    }

    public void deleteCandidateGroup(String groupId) {
        deleteGroupIdentityLink(groupId, CANDIDATE);
    }

    public void deleteCandidateUser(String userId) {
        deleteUserIdentityLink(userId, CANDIDATE);
    }

    public void deleteGroupIdentityLink(String groupId, IdentityLinkType identityLinkType) {
        if (groupId!=null) {
            deleteIdentityLink(null, groupId, identityLinkType);
        }
    }

    public void deleteUserIdentityLink(String userId, IdentityLinkType identityLinkType) {
        if (userId!=null) {
            deleteIdentityLink(userId, null, identityLinkType);
        }
    }

}


