package org.activiti.springdatajpa.models

import com.fasterxml.jackson.annotation.JsonIdentityInfo
import com.fasterxml.jackson.annotation.ObjectIdGenerators
import org.activiti.engine.task.DelegationState
import org.activiti.springdatajpa.models.enums.SuspensionState;
// Generated Nov 21, 2015 11:41:58 AM by Hibernate Tools 3.2.2.GA
import org.activiti.springdatajpa.repositories.IdentityLinkRepository
import org.activiti.springdatajpa.models.enums.IdentityLinkType
import org.springframework.beans.factory.annotation.Autowired;

import javax.persistence.*;
import java.util.*

import static javax.persistence.EnumType.STRING
import static org.activiti.springdatajpa.models.enums.IdentityLinkType.candidate;

/**
 * Task generated by hbm2java
 */
@Entity
@Table(name = "act_ru_task")
@JsonIdentityInfo(generator = ObjectIdGenerators.UUIDGenerator)
public class Task {

    /**
     * Default value used for priority when a new {@link Task} is created.
     */
    public static int DEFAULT_PRIORITY = 50;

    public Task() {
    }

    public Task(String id) {
        this.id = id;
    }

    @Id
    @Column(name = "id_", unique = true, nullable = false, length = 64)
    String id

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "proc_def_id_")
    ProcessDefinition processDefinition

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "execution_id_")
    Execution execution

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "proc_inst_id_")
    Execution processInstance

    @Column(name = "rev_")
    Integer rev

    @Column(name = "name_")
    String name

    @Column(name = "parent_task_id_", length = 64)
    String parentTaskId

    @Column(name = "description_", length = 4000)
    String description

    @Column(name = "task_def_key_")
    String taskDefKey

    @Column(name = "owner_")
    String owner

    @Column(name = "assignee_")
    String assignee

    @Column(name = "delegation_", length = 64)
    @Enumerated(STRING)
    DelegationState delegationState

    @Column(name = "priority_")
    Integer priority = DEFAULT_PRIORITY

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "create_time_", length = 29)
    Date createTime

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "due_date_", length = 29)
    Date dueDate

    @Column(name = "category_")
    String category

    @Column(name = "suspension_state_")
    @Enumerated
    SuspensionState suspensionState

    @Column(name = "tenant_id_")
    String tenantId

    @Column(name = "form_key_")
    String formKey

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "task")
    Set<IdentityLink> identityLinks

    // task assignment //////////////////////////////////////////////////////////

    @Autowired
    @Transient
    private IdentityLinkRepository identityLinkRepository

    IdentityLink addIdentityLink(String userId, String groupId, IdentityLinkType type) {
        IdentityLink identityLink = new IdentityLink(task: this, userId: userId, groupId: groupId, type: type);
        identityLinks.add(identityLink);
        identityLinkRepository.save(identityLink);
        if (userId != null && processInstance.id != null) {
            processInstance.involveUser(userId, IdentityLinkType.participant);
        }
        return identityLink;
    }

    void deleteIdentityLink(String userId, String groupId, IdentityLinkType type) {
        List<IdentityLink> identityLinks = identityLinkRepository
                .findByTaskIdAndUserIdAndGroupIdAndType(id, userId, groupId, type);

        List<String> identityLinkIds = new ArrayList<String>();
        for (IdentityLink identityLink: identityLinks) {
            identityLinkRepository.delete(identityLink.id);
            identityLinkIds.add(identityLink.id);
        }

//        identityLinks.removeIf({
//            it.type == candidate &&
//                    !identityLinkIds.contains(it.id) &&
//                    (userId != null && userId == it.userId) ||
//                    (groupId != null && groupId == it.groupId)
//        })

        // fix deleteCandidate() in create TaskListener
        List<IdentityLink> removedIdentityLinkEntities = new ArrayList<IdentityLink>();
        for (IdentityLink identityLink : this.getIdentityLinks()) {
            if (candidate.equals(identityLink.getType()) &&
                    !identityLinkIds.contains(identityLink.getId())) {

                if ((userId != null && userId.equals(identityLink.getUserId()))
                        || (groupId != null && groupId.equals(identityLink.getGroupId()))) {

                    identityLinkRepository.delete(identityLink.id);
                    removedIdentityLinkEntities.add(identityLink);
                }
            }
        }
        getIdentityLinks().removeAll(removedIdentityLinkEntities);
    }

    @Transient
    Set<IdentityLink> getCandidates() {
        identityLinks.findAll { it.type == candidate }
    }

    def addCandidateUser(String userId) {
        addIdentityLink(userId, null, candidate);
    }

    def addCandidateUsers(Collection<String> candidateUsers) {
        candidateUsers.each this.&addCandidateUser
    }

    def addCandidateGroup(String groupId) {
        addIdentityLink(null, groupId, candidate);
    }

    def addCandidateGroups(Collection<String> candidateGroups) {
        candidateGroups.each this.&addCandidateGroup
    }

    def deleteCandidateGroup(String groupId) {
        deleteGroupIdentityLink(groupId, candidate);
    }

    def deleteCandidateUser(String userId) {
        deleteUserIdentityLink(userId, candidate);
    }

    def deleteGroupIdentityLink(String groupId, IdentityLinkType identityLinkType) {
        if (groupId!=null) {
            deleteIdentityLink(null, groupId, identityLinkType);
        }
    }

    def deleteUserIdentityLink(String userId, IdentityLinkType identityLinkType) {
        if (userId!=null) {
            deleteIdentityLink(userId, null, identityLinkType);
        }
    }

}


